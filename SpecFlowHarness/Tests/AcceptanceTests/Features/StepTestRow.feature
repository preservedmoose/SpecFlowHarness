@Core

# the table handling features in the StepRow<TSR> base class and
# the sentence handling features in the transforms file.
Feature: Test the step flow code

	As a developer
	I want to be able to create tables
	In order to pass data easily to the code

# this feature file contains commented sections that should be left there
# these are tests that are used to prove that the error handling is working

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Background:

	Given we test case sensitivity
	And we test Case Sensitivity

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario Outline: 01 - Test parsing of DateTime and some objects (transforms)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we set the time to <Date Time Column With Spaces>
	And we test Timely cycle and 2015-07 period for time 2015-07-06 14:10

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have no errors!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Examples:
		| Date Time Column With Spaces |
		| 2016-12-27 10:00             |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 02 - Test parsing of comma separated Strings and Enums

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# compare the strings by hand (old) or automatically handled by the framework (new)
	When we have (old) these strings: a, b, c
	When we have (new) these strings: a, b, c

	And we have (old) these integers: 1000, 2000, 3000
	And we have (new) these integers: 1,000, 2,000, 3,000

	# compare the strings by hand (old) or use the framework to simplify the conversion in transforms (new)
	And we have (old) these colours: Red, Green, Blue
	And we have (new) these colours: red, green colour, blue colour

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have no errors!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 03 - Test for invalid column names (that do not exist on the class)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# just ignores the columns
	When we test (old) the step row class:
		| Is Boolean Value | Unknown Column | Another Unknown Column |
		| yes              | nonsense       | more nonsense          |

	# performs the check and throws a specific error message
	#When we test (new) the step row class:
	#	| Is Boolean Value | Unknown Column | Another Unknown Column |
	#	| yes              | nonsense       | more nonsense          |


#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have no errors!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 04 - Test that nullable columns are not allowed

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# parses the Int32 and ignores the collection
	When we test (old) the nullable step row class:
		| Nullable Int 32 Value | Nullable Int 32 Values |
		| 4                     | 2, 3, 4                |

	# performs the check and throws a specific error message
	#When we test (new) the nullable step row class:
	#	| Nullable Int 32 Value | Nullable Int 32 Values |
	#	| 4                     | 2, 3, 4                |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have no errors!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 05 - Try to use default values (single value per type)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# the Colour enum is checked - it must have a valid value for (old) to pass

	# most of these forms are recognised, so they are overwritten
	#Then we have (old) test using (new) default results:
	#	| Is Boolean Value | Char Value | Byte Value | Int 16 Value | Int 32 Value | Int 64 Value | Single Value | Double Value | Decimal Value | Date Time Value | Colour Value | String Value | Year Month Value | Cycle Type Value |
	#	|                  |            |            |              |              |              |              |              |               |                 | None         |              |                  |                  |

	Then we have (new) test default results:
		| Is Boolean Value | Char Value | Byte Value | Int 16 Value | Int 32 Value | Int 64 Value | Single Value | Double Value | Decimal Value | Date Time Value | Colour Value | String Value | Year Month Value | Cycle Type Value |
		|                  |            |            |              |              |              |              |              |               |                 |              |              |                  |                  |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have no errors!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 06 - Try to use default values (multiple values per type)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we do nothing!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# these forms are unrecognised, so they are not overwritten
	Then we have (old) test using (new) default results:
		| Is Boolean Values | Char Values | Byte Values | Int 16 Values | Int 32 Values | Int 64 Values | Single Values | Double Values | Decimal Values | Date Time Values | Colour Values | String Values | Year Month Values | Cycle Type Values |
		|                   |             |             |               |               |               |               |               |                |                  |               |               |                   |                   |

	Then we have (new) test default results:
		| Is Boolean Values | Char Values | Byte Values | Int 16 Values | Int 32 Values | Int 64 Values | Single Values | Double Values | Decimal Values | Date Time Values | Colour Values | String Values | Year Month Values | Cycle Type Values |
		|                   |             |             |               |               |               |               |               |                |                  |               |               |                   |                   |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 07 - Try to pass all types with mixed values (single value per type)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# the Colour enum is checked - it must have a valid value for (old) to pass
	When we test (old) the step row class:
		| Is Boolean Value | Char Value | Byte Value | Int 16 Value | Int 32 Value | UInt 32 Value | Int 64 Value | UInt 64 Value | Single Value | Double Value | Decimal Value | Date Time Value  | Colour Value | String Value | Cycle Type Value | Year Month Value |
		| yes              | y          | 123        | 1234         | 1234         | 1234          | 2345         | 2345          | 1123.45      | 2345.67      | 32345.67      | 2015-04-15       | Red          | one          | Timely           | 2015-10          |
		| true             | t          | 123        | 1,234        | 1,234        | 1,234         | 2,345        | 2,345         | 1,123.45     | 2,345.67     | 32,345.67     | 2015-04-15 13:22 | Red          | two          | Evening          | 9999-12          |
		| a1               | b2         | c3         | d4           | e5           | f6            | g7           | h8            | i9           | j10          | k11           | l12              | None         | n14          | o15              | p16              |

	When we test (new) the step row class:
		| Is Boolean Value | Char Value | Byte Value | Int 16 Value | Int 32 Value | UInt 32 Value | Int 64 Value | UInt 64 Value | Single Value | Double Value | Decimal Value | Date Time Value  | Colour Value | String Value | Cycle Type Value | Year Month Value |
		| yes              | y          | 123        | 1234         | 1234         | 1234          | 2345         | 2345          | 1123.45      | 2345.67      | 32345.67      | 2015-04-15       | Red          | one          | Timely           | 2015-10          |
		| true             | t          | 123        | 1,234        | 1,234        | 1234          | 2,345        | 2345          | 1,123.45     | 2,345.67     | 32,345.67     | 2015-04-15 13:22 | Red Colour   | two          | Evening          | 9999-12          |
		#| a1               | b2         | c3         | d4           | e5           | f6            | g7           | h8            | i9           | j10          | k11           | l12              | m13          | n14          | o15              | p16              |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have no errors!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 08 - Try to pass all types with mixed values (multiple values per type)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# treats everything as a string
	When we test (old) the step row class:
		| Colour Values           | String Values        | Cycle Type Values | Year Month Values | UInt 16 Values |
		| Red, Green, Blue Colour | First, Second, Third | Timely, Evening   | 2015-10, 2015-09  | 1, 2, 3, 4     |
		| A, B, C, D              | E, F, G              | H, I, J           | K, L              | M              |

	# treats everything based on the specified type in the class
	When we test (new) the step row class:
		| Colour Values           | String Values        | Cycle Type Values | Year Month Values | UInt 16 Values |
		| Red, Green, Blue Colour | First, Second, Third | Timely, Evening   | 2015-10, 2015-09  | 1, 2, 3, 4     |
		#| A, B, C, D              | E, F, G              | H, I, J           | K, L              | M              |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have no errors!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 09 - Try to pass all types with mixed values (single value per type)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we do nothing!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# treats everything as a string and performs string comparisons
	Then we have (old) test results:
		| Is Boolean Value | Char Value | Byte Value | Int 16 Value | Int 32 Value | Int 64 Value | Single Value | Double Value | Decimal Value | Date Time Value  | Colour Value | String Value | Year Month Value | Cycle Type Value |
		| yes              | y          | 123        | 1234         | 12345        | 123456       | 1123.45      | 2345.67      | 32345.67      | 2016-12-27       | Red          | Test 1       | 2016-11          | Timely           |
		| true             | t          | 123        | 1,234        | 12,345       | 123,456      | 1,123.45     | 2,345.67     | 32,345.67     | 2016-12-27 13:30 | Red Colour   | Test 2       | 2016-12          | Evening          |
		#| a1               | b2         | c3         | d4           | e5           | f6           | g7           | h8           | i9            | j10              | Red          | l12          | m13              | n14              |

	Then we have (old) test using (new) results:
		| Is Boolean Value | Char Value | Byte Value | Int 16 Value | Int 32 Value | Int 64 Value | Single Value | Double Value | Decimal Value | Date Time Value  | Colour Value | String Value | Year Month Value | Cycle Type Value |
		| yes              | y          | 123        | 1234         | 12345        | 123456       | 1123.45      | 2345.67      | 32345.67      | 2016-12-27       | Red          | Test 1       | 2016-11          | Timely           |
		| true             | t          | 123        | 1,234        | 12,345       | 123,456      | 1,123.45     | 2,345.67     | 32,345.67     | 2016-12-27 13:30 | Red          | Test 2       | 2016-12          | Evening          |
		#| a1               | b2         | c3         | d4           | e5           | f6           | g7           | h8           | i9            | j10              | Red          | l12          | m13              | n14              |

	# treats everything based on the specified type in the class; can also be an ordered comparison
	Then we have (new) test results:
		| Is Boolean Value | Char Value | Byte Value | Int 16 Value | Int 32 Value | Int 64 Value | Single Value | Double Value | Decimal Value | Date Time Value  | Colour Value | String Value | Year Month Value | Cycle Type Value |
		| yes              | y          | 123        | 1234         | 12345        | 123456       | 1123.45      | 2345.67      | 32345.67      | 2016-12-27       | Red          | Test 1       | 2016-11          | Timely           |
		| true             | t          | 123        | 1,234        | 12,345       | 123,456      | 1,123.45     | 2,345.67     | 32,345.67     | 2016-12-27 13:30 | Red Colour   | Test 2       | 2016-12          | Evening          |
		#| a1               | b2         | c3         | d4           | e5           | f6           | g7           | h8           | i9            | j10              | k11          | l12          | m13              | n14              |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 10 - Try to pass all types with mixed values (multiple values per type)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we do nothing!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have (old) test results:
		| Is Boolean Values | Char Values | Byte Values | Int 16 Values | Int 32 Values  | Int 64 Values    | Single Values      | Double Values      | Decimal Values       | Date Time Values                   | Colour Values                         | String Values  | Year Month Values | Cycle Type Values |
		| yes, yes, no      | a, b, c     | 121, 122    | 1231, 1232    | 12341, 12342   | 123451, 123452   | 1123.41, 1123.42   | 2345.61, 2345.62   | 32345.61, 32345.62   | 2016-12-27, 2016-12-28             | Red, Green, Blue                      | Test 1, Test 2 | 2016-11, 2016-10  | Timely, Evening   |
		| true, true, false | a, b, c     | 121, 122    | 1,231, 1,232  | 12,341, 12,342 | 123,451, 123,452 | 1,123.41, 1,123.42 | 2,345.61, 2,345.62 | 32,345.61, 32,345.62 | 2016-12-27 13:30, 2016-12-28 14:30 | Red Colour, Green Colour, Blue Colour | Test 1, Test 2 | 2016-11, 2016-10  | Timely, Evening   |
		#| a1                | b2          | c3          | d4            | e5             | f6               | g7                 | h8                 | i9                   | j10                                | k11                                   | l12            | m13               | n14               |

	Then we have (old) test using (new) results:
		| Is Boolean Values | Char Values | Byte Values | Int 16 Values | Int 32 Values  | Int 64 Values    | Single Values      | Double Values      | Decimal Values       | Date Time Values                   | Colour Values                         | String Values  | Year Month Values | Cycle Type Values |
		| yes, yes, no      | a, b, c     | 121, 122    | 1231, 1232    | 12341, 12342   | 123451, 123452   | 1123.41, 1123.42   | 2345.61, 2345.62   | 32345.61, 32345.62   | 2016-12-27, 2016-12-28             | Red, Green, Blue                      | Test 1, Test 2 | 2016-11, 2016-10  | Timely, Evening   |
		| true, true, false | a, b, c     | 121, 122    | 1,231, 1,232  | 12,341, 12,342 | 123,451, 123,452 | 1,123.41, 1,123.42 | 2,345.61, 2,345.62 | 32,345.61, 32,345.62 | 2016-12-27 13:30, 2016-12-28 14:30 | Red Colour, Green Colour, Blue Colour | Test 1, Test 2 | 2016-11, 2016-10  | Timely, Evening   |
		#| a1                | b2          | c3          | d4            | e5             | f6               | g7                 | h8                 | i9                   | j10                                | k11                                   | l12            | m13               | n14               |

	Then we have (new) test results:
		| Is Boolean Values | Char Values | Byte Values | Int 16 Values | Int 32 Values  | Int 64 Values    | Single Values      | Double Values      | Decimal Values       | Date Time Values                   | Colour Values                         | String Values  | Year Month Values | Cycle Type Values |
		| yes, yes, no      | a, b, c     | 121, 122    | 1231, 1232    | 12341, 12342   | 123451, 123452   | 1123.41, 1123.42   | 2345.61, 2345.62   | 32345.61, 32345.62   | 2016-12-27, 2016-12-28             | Red, Green, Blue                      | Test 1, Test 2 | 2016-11, 2016-10  | Timely, Evening   |
		| true, true, false | a, b, c     | 121, 122    | 1,231, 1,232  | 12,341, 12,342 | 123,451, 123,452 | 1,123.41, 1,123.42 | 2,345.61, 2,345.62 | 32,345.61, 32,345.62 | 2016-12-27 13:30, 2016-12-28 14:30 | Red Colour, Green Colour, Blue Colour | Test 1, Test 2 | 2016-11, 2016-10  | Timely, Evening   |
		#| a1                | b2          | c3          | d4            | e5             | f6               | g7                 | h8                 | i9                   | j10                                | k11                                   | l12            | m13               | n14               |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 11 - Error handling on a large table is clearer in new code

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we do nothing!

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# the old method will pass because it compares strings
	# but this will not convert the integers for us (look at code)
	#Then we have (old) large test results:
	#	| Purchase Date | Quantity 1 | Quantity 2 | Quantity 3 | Quantity 4 | Quantity 5 | Quantity 6 |
	#	| 2017-01-01    | 1,000      | 2,000      | 3,000      | 4,000      | 5,000      | 6,000      |
	#	| 2017-01-02    | 1,001      | 2,001      | 3,001      | 4,001      | 5,001      | 6,001      |
	#	| 2017-01-03    | 1,002      | 2,002      | 3,002      | 4,002      | 5,055      | 6,002      |
	#	| 2017-01-04    | 1,003      | 2,003      | 3,003      | 4,003      | 5,003      | 6,003      |
	#	| 2017-01-06    | 1,005      | 2,005      | 3,055      | 4,005      | 5,005      | 6,005      |
	#	| 2017-01-07    | 1,006      | 2,006      | 3,006      | 4,006      | 5,006      | 6,006      |
	#	| 2017-01-08    | 1,007      | 2,007      | 3,007      | 4,007      | 5,007      | 6,007      |
	#	| 2017-01-09    | 1,008      | 2,008      | 3,008      | 4,008      | 5,008      | 6,008      |

	Then we have (old) large test results:
		| Purchase Date | Quantity 1 | Quantity 2 | Quantity 3 | Quantity 4 | Quantity 5 | Quantity 6 |
		| 2017-01-01    | 1,000      | 2,000      | 3,000      | 4,000      | 5,000      | 6,000      |
		| 2017-01-02    | 1,001      | 2,001      | 3,001      | 4,001      | 5,001      | 6,001      |
		| 2017-01-03    | 1,002      | 2,002      | 3,002      | 4,002      | 5,002      | 6,002      |
		| 2017-01-04    | 1,003      | 2,003      | 3,003      | 4,003      | 5,003      | 6,003      |
		| 2017-01-05    | 1,004      | 2,004      | 3,004      | 4,004      | 5,004      | 6,004      |
		| 2017-01-06    | 1,005      | 2,005      | 3,005      | 4,005      | 5,005      | 6,005      |
		| 2017-01-07    | 1,006      | 2,006      | 3,006      | 4,006      | 5,006      | 6,006      |
		| 2017-01-08    | 1,007      | 2,007      | 3,007      | 4,007      | 5,007      | 6,007      |
		| 2017-01-09    | 1,008      | 2,008      | 3,008      | 4,008      | 5,008      | 6,008      |
		| 2017-01-10    | 1,009      | 2,009      | 3,009      | 4,009      | 5,009      | 6,009      |
		| 2017-01-11    | 1,010      | 2,010      | 3,010      | 4,010      | 5,010      | 6,010      |
		| 2017-01-12    | 1,011      | 2,011      | 3,011      | 4,011      | 5,011      | 6,011      |
		| 2017-01-13    | 1,012      | 2,012      | 3,012      | 4,012      | 5,012      | 6,012      |
		| 2017-01-14    | 1,013      | 2,013      | 3,013      | 4,013      | 5,013      | 6,013      |
		| 2017-01-15    | 1,014      | 2,014      | 3,014      | 4,014      | 5,014      | 6,014      |
		| 2017-01-16    | 1,015      | 2,015      | 3,015      | 4,015      | 5,015      | 6,015      |
		| 2017-01-17    | 1,016      | 2,016      | 3,016      | 4,016      | 5,016      | 6,016      |
		| 2017-01-18    | 1,017      | 2,017      | 3,017      | 4,017      | 5,017      | 6,017      |
		| 2017-01-19    | 1,018      | 2,018      | 3,018      | 4,018      | 5,018      | 6,018      |
		| 2017-01-20    | 1,019      | 2,019      | 3,019      | 4,019      | 5,019      | 6,019      |
		| 2017-01-21    | 1,020      | 2,020      | 3,020      | 4,020      | 5,020      | 6,020      |
		| 2017-01-22    | 1,021      | 2,021      | 3,021      | 4,021      | 5,021      | 6,021      |
		| 2017-01-23    | 1,022      | 2,022      | 3,022      | 4,022      | 5,022      | 6,022      |
		| 2017-01-24    | 1,023      | 2,023      | 3,023      | 4,023      | 5,023      | 6,023      |
		| 2017-01-25    | 1,024      | 2,024      | 3,024      | 4,024      | 5,024      | 6,024      |
		| 2017-01-26    | 1,025      | 2,025      | 3,025      | 4,025      | 5,025      | 6,025      |
		| 2017-01-27    | 1,026      | 2,026      | 3,026      | 4,026      | 5,026      | 6,026      |
		| 2017-01-28    | 1,027      | 2,027      | 3,027      | 4,027      | 5,027      | 6,027      |
		| 2017-01-29    | 1,028      | 2,028      | 3,028      | 4,028      | 5,028      | 6,028      |
		| 2017-01-30    | 1,029      | 2,029      | 3,029      | 4,029      | 5,029      | 6,029      |
		| 2017-01-31    | 1,030      | 2,030      | 3,030      | 4,030      | 5,030      | 6,030      |
		| 2017-02-01    | 1,031      | 2,031      | 3,031      | 4,031      | 5,031      | 6,031      |
		| 2017-02-02    | 1,032      | 2,032      | 3,032      | 4,032      | 5,032      | 6,032      |
		| 2017-02-03    | 1,033      | 2,033      | 3,033      | 4,033      | 5,033      | 6,033      |
		| 2017-02-04    | 1,034      | 2,034      | 3,034      | 4,034      | 5,034      | 6,034      |
		| 2017-02-05    | 1,035      | 2,035      | 3,035      | 4,035      | 5,035      | 6,035      |
		| 2017-02-06    | 1,036      | 2,036      | 3,036      | 4,036      | 5,036      | 6,036      |
		| 2017-02-07    | 1,037      | 2,037      | 3,037      | 4,037      | 5,037      | 6,037      |
		| 2017-02-08    | 1,038      | 2,038      | 3,038      | 4,038      | 5,038      | 6,038      |
		| 2017-02-09    | 1,039      | 2,039      | 3,039      | 4,039      | 5,039      | 6,039      |
		#| 2017-02-08    | 1,038      | 2,038      | 3,088      | 4,038      | 5,038      | 6,038      |
		#| 2017-02-09    | 1,039      | 2,039      | 3,039      | 4,099      | 5,039      | 6,039      |
		| 2017-02-10    | 1,040      | 2,040      | 3,040      | 4,040      | 5,040      | 6,040      |
		| 2017-02-11    | 1,041      | 2,041      | 3,041      | 4,041      | 5,041      | 6,041      |
		| 2017-02-12    | 1,042      | 2,042      | 3,042      | 4,042      | 5,042      | 6,042      |
		| 2017-02-13    | 1,043      | 2,043      | 3,043      | 4,043      | 5,043      | 6,043      |
		| 2017-02-14    | 1,044      | 2,044      | 3,044      | 4,044      | 5,044      | 6,044      |
		| 2017-02-15    | 1,045      | 2,045      | 3,045      | 4,045      | 5,045      | 6,045      |
		| 2017-02-16    | 1,046      | 2,046      | 3,046      | 4,046      | 5,046      | 6,046      |
		| 2017-02-17    | 1,047      | 2,047      | 3,047      | 4,047      | 5,047      | 6,047      |
		| 2017-02-18    | 1,048      | 2,048      | 3,048      | 4,048      | 5,048      | 6,048      |
		| 2017-02-19    | 1,049      | 2,049      | 3,049      | 4,049      | 5,049      | 6,049      |
		| 2017-02-20    | 1,050      | 2,050      | 3,050      | 4,050      | 5,050      | 6,050      |
		| 2017-02-21    | 1,051      | 2,051      | 3,051      | 4,051      | 5,051      | 6,051      |
		| 2017-02-22    | 1,052      | 2,052      | 3,052      | 4,052      | 5,052      | 6,052      |
		| 2017-02-23    | 1,053      | 2,053      | 3,053      | 4,053      | 5,053      | 6,053      |
		| 2017-02-24    | 1,054      | 2,054      | 3,054      | 4,054      | 5,054      | 6,054      |
		| 2017-02-25    | 1,055      | 2,055      | 3,055      | 4,055      | 5,055      | 6,055      |
		| 2017-02-26    | 1,056      | 2,056      | 3,056      | 4,056      | 5,056      | 6,056      |
		| 2017-02-27    | 1,057      | 2,057      | 3,057      | 4,057      | 5,057      | 6,057      |
		| 2017-02-28    | 1,058      | 2,058      | 3,058      | 4,058      | 5,058      | 6,058      |
		| 2017-03-01    | 1,059      | 2,059      | 3,059      | 4,059      | 5,059      | 6,059      |

	Then we have (new) large test results:
		| Purchase Date | Quantity 1 | Quantity 2 | Quantity 3 | Quantity 4 | Quantity 5 | Quantity 6 |
		| 2017-01-01    | 1,000      | 2,000      | 3,000      | 4,000      | 5,000      | 6,000      |
		| 2017-01-02    | 1,001      | 2,001      | 3,001      | 4,001      | 5,001      | 6,001      |
		| 2017-01-03    | 1,002      | 2,002      | 3,002      | 4,002      | 5,002      | 6,002      |
		| 2017-01-04    | 1,003      | 2,003      | 3,003      | 4,003      | 5,003      | 6,003      |
		| 2017-01-05    | 1,004      | 2,004      | 3,004      | 4,004      | 5,004      | 6,004      |
		| 2017-01-06    | 1,005      | 2,005      | 3,005      | 4,005      | 5,005      | 6,005      |
		| 2017-01-07    | 1,006      | 2,006      | 3,006      | 4,006      | 5,006      | 6,006      |
		| 2017-01-08    | 1,007      | 2,007      | 3,007      | 4,007      | 5,007      | 6,007      |
		| 2017-01-09    | 1,008      | 2,008      | 3,008      | 4,008      | 5,008      | 6,008      |
		| 2017-01-10    | 1,009      | 2,009      | 3,009      | 4,009      | 5,009      | 6,009      |
		| 2017-01-11    | 1,010      | 2,010      | 3,010      | 4,010      | 5,010      | 6,010      |
		| 2017-01-12    | 1,011      | 2,011      | 3,011      | 4,011      | 5,011      | 6,011      |
		| 2017-01-13    | 1,012      | 2,012      | 3,012      | 4,012      | 5,012      | 6,012      |
		| 2017-01-14    | 1,013      | 2,013      | 3,013      | 4,013      | 5,013      | 6,013      |
		| 2017-01-15    | 1,014      | 2,014      | 3,014      | 4,014      | 5,014      | 6,014      |
		| 2017-01-16    | 1,015      | 2,015      | 3,015      | 4,015      | 5,015      | 6,015      |
		| 2017-01-17    | 1,016      | 2,016      | 3,016      | 4,016      | 5,016      | 6,016      |
		| 2017-01-18    | 1,017      | 2,017      | 3,017      | 4,017      | 5,017      | 6,017      |
		| 2017-01-19    | 1,018      | 2,018      | 3,018      | 4,018      | 5,018      | 6,018      |
		| 2017-01-20    | 1,019      | 2,019      | 3,019      | 4,019      | 5,019      | 6,019      |
		| 2017-01-21    | 1,020      | 2,020      | 3,020      | 4,020      | 5,020      | 6,020      |
		| 2017-01-22    | 1,021      | 2,021      | 3,021      | 4,021      | 5,021      | 6,021      |
		| 2017-01-23    | 1,022      | 2,022      | 3,022      | 4,022      | 5,022      | 6,022      |
		| 2017-01-24    | 1,023      | 2,023      | 3,023      | 4,023      | 5,023      | 6,023      |
		| 2017-01-25    | 1,024      | 2,024      | 3,024      | 4,024      | 5,024      | 6,024      |
		| 2017-01-26    | 1,025      | 2,025      | 3,025      | 4,025      | 5,025      | 6,025      |
		| 2017-01-27    | 1,026      | 2,026      | 3,026      | 4,026      | 5,026      | 6,026      |
		| 2017-01-28    | 1,027      | 2,027      | 3,027      | 4,027      | 5,027      | 6,027      |
		| 2017-01-29    | 1,028      | 2,028      | 3,028      | 4,028      | 5,028      | 6,028      |
		| 2017-01-30    | 1,029      | 2,029      | 3,029      | 4,029      | 5,029      | 6,029      |
		| 2017-01-31    | 1,030      | 2,030      | 3,030      | 4,030      | 5,030      | 6,030      |
		| 2017-02-01    | 1,031      | 2,031      | 3,031      | 4,031      | 5,031      | 6,031      |
		| 2017-02-02    | 1,032      | 2,032      | 3,032      | 4,032      | 5,032      | 6,032      |
		| 2017-02-03    | 1,033      | 2,033      | 3,033      | 4,033      | 5,033      | 6,033      |
		| 2017-02-04    | 1,034      | 2,034      | 3,034      | 4,034      | 5,034      | 6,034      |
		| 2017-02-05    | 1,035      | 2,035      | 3,035      | 4,035      | 5,035      | 6,035      |
		| 2017-02-06    | 1,036      | 2,036      | 3,036      | 4,036      | 5,036      | 6,036      |
		| 2017-02-07    | 1,037      | 2,037      | 3,037      | 4,037      | 5,037      | 6,037      |
		| 2017-02-08    | 1,038      | 2,038      | 3,038      | 4,038      | 5,038      | 6,038      |
		| 2017-02-09    | 1,039      | 2,039      | 3,039      | 4,039      | 5,039      | 6,039      |
		#| 2017-02-08    | 1,038      | 2,038      | 3,088      | 4,038      | 5,038      | 6,038      |
		#| 2017-02-09    | 1,039      | 2,039      | 3,039      | 4,099      | 5,039      | 6,039      |
		| 2017-02-10    | 1,040      | 2,040      | 3,040      | 4,040      | 5,040      | 6,040      |
		| 2017-02-11    | 1,041      | 2,041      | 3,041      | 4,041      | 5,041      | 6,041      |
		| 2017-02-12    | 1,042      | 2,042      | 3,042      | 4,042      | 5,042      | 6,042      |
		| 2017-02-13    | 1,043      | 2,043      | 3,043      | 4,043      | 5,043      | 6,043      |
		| 2017-02-14    | 1,044      | 2,044      | 3,044      | 4,044      | 5,044      | 6,044      |
		| 2017-02-15    | 1,045      | 2,045      | 3,045      | 4,045      | 5,045      | 6,045      |
		| 2017-02-16    | 1,046      | 2,046      | 3,046      | 4,046      | 5,046      | 6,046      |
		| 2017-02-17    | 1,047      | 2,047      | 3,047      | 4,047      | 5,047      | 6,047      |
		| 2017-02-18    | 1,048      | 2,048      | 3,048      | 4,048      | 5,048      | 6,048      |
		| 2017-02-19    | 1,049      | 2,049      | 3,049      | 4,049      | 5,049      | 6,049      |
		| 2017-02-20    | 1,050      | 2,050      | 3,050      | 4,050      | 5,050      | 6,050      |
		| 2017-02-21    | 1,051      | 2,051      | 3,051      | 4,051      | 5,051      | 6,051      |
		| 2017-02-22    | 1,052      | 2,052      | 3,052      | 4,052      | 5,052      | 6,052      |
		| 2017-02-23    | 1,053      | 2,053      | 3,053      | 4,053      | 5,053      | 6,053      |
		| 2017-02-24    | 1,054      | 2,054      | 3,054      | 4,054      | 5,054      | 6,054      |
		| 2017-02-25    | 1,055      | 2,055      | 3,055      | 4,055      | 5,055      | 6,055      |
		| 2017-02-26    | 1,056      | 2,056      | 3,056      | 4,056      | 5,056      | 6,056      |
		| 2017-02-27    | 1,057      | 2,057      | 3,057      | 4,057      | 5,057      | 6,057      |
		| 2017-02-28    | 1,058      | 2,058      | 3,058      | 4,058      | 5,058      | 6,058      |
		| 2017-03-01    | 1,059      | 2,059      | 3,059      | 4,059      | 5,059      | 6,059      |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Scenario: 12 - Test passing of data for same scenario into different step classes

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Given we have these values:
		| Key | Quantity | Percentage | Count |
		| c1  | 1.2345   | 34.56      | 1,000 |
		| c2  | 2.3456   | 56.78      | 2,000 |
		| c3  | 3.4567   | 78.90      | 3,000 |


#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we use the calculator log function

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have these values:
		| Key | Quantity | Percentage | Count |
		| c1  | 0.0915   | 3.54       | 6     |
		| c2  | 0.3703   | 4.04       | 7     |
		| c3  | 0.5387   | 4.37       | 8     |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we use the calculator log10 function

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have these values:
		| Key | Quantity | Percentage | Count |
		| c1  | 0.0915   | 3.54       | 3     |
		| c2  | 0.3703   | 4.04       | 3     |
		| c3  | 0.5387   | 4.37       | 3     |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	When we use the calculator sin function

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have these values:
		| Key | Quantity | Percentage | Count |
		| c1  |  0.9440  |      0     | 0     |
		| c2  |  0.7146  |   0.23     | 0     |
		| c3  | -0.3099  |  -0.35     | 0     |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	# make sure that the original data was not changed
	When we use the calculator none function

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Then we have these values:
		| Key | Quantity | Percentage | Count |
		| c1  | 1.2345   | 34.56      | 1,000 |
		| c2  | 2.3456   | 56.78      | 2,000 |
		| c3  | 3.4567   | 78.90      | 3,000 |

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
