// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PreservedMoose.SpecFlowHarness.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Core")]
    public partial class TestTheStepFlowCodeFeature : Xunit.IClassFixture<TestTheStepFlowCodeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StepTestRow.feature"
#line hidden
        
        public TestTheStepFlowCodeFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Test the step flow code", "\tAs a developer\r\n\tI want to be able to create tables\r\n\tIn order to pass data easi" +
                    "ly to the code", ProgrammingLanguage.CSharp, new string[] {
                        "Core"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 17
#line 19
 testRunner.Given("we test case sensitivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And("we test Case Sensitivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(TestTheStepFlowCodeFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "01 - Test parsing of DateTime and some objects (transforms)")]
        [Xunit.InlineDataAttribute("2016-12-27 10:00", new string[0])]
        public virtual void _01_TestParsingOfDateTimeAndSomeObjectsTransforms(string dateTimeColumnWithSpaces, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 - Test parsing of DateTime and some objects (transforms)", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 29
 testRunner.When(string.Format("we set the time to {0}", dateTimeColumnWithSpaces), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And("we test Timely cycle and 2015-07 period for time 2015-07-06 14:10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.Then("we have no errors!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="02 - Test parsing of comma separated Strings and Enums")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "02 - Test parsing of comma separated Strings and Enums")]
        public virtual void _02_TestParsingOfCommaSeparatedStringsAndEnums()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 - Test parsing of comma separated Strings and Enums", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 50
 testRunner.When("we have (old) these strings: a, b, c", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.When("we have (new) these strings: a, b, c", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.And("we have (old) these integers: 1000, 2000, 3000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("we have (new) these integers: 1,000, 2,000, 3,000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("we have (old) these colours: Red, Green, Blue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("we have (new) these colours: red, green colour, blue colour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.Then("we have no errors!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="03 - Test for invalid column names (that do not exist on the class)")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "03 - Test for invalid column names (that do not exist on the class)")]
        public virtual void _03_TestForInvalidColumnNamesThatDoNotExistOnTheClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 - Test for invalid column names (that do not exist on the class)", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Value",
                        "Unknown Column",
                        "Another Unknown Column"});
            table1.AddRow(new string[] {
                        "yes",
                        "nonsense",
                        "more nonsense"});
#line 72
 testRunner.When("we test (old) the step row class:", ((string)(null)), table1, "When ");
#line 84
 testRunner.Then("we have no errors!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="04 - Test that nullable columns are not allowed")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "04 - Test that nullable columns are not allowed")]
        public virtual void _04_TestThatNullableColumnsAreNotAllowed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 - Test that nullable columns are not allowed", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nullable Int 32 Value",
                        "Nullable Int 32 Values"});
            table2.AddRow(new string[] {
                        "4",
                        "2, 3, 4"});
#line 94
 testRunner.When("we test (old) the nullable step row class:", ((string)(null)), table2, "When ");
#line 105
 testRunner.Then("we have no errors!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="05 - Try to use default values (single value per type)")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "05 - Try to use default values (single value per type)")]
        public virtual void _05_TryToUseDefaultValuesSingleValuePerType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05 - Try to use default values (single value per type)", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Value",
                        "Char Value",
                        "Byte Value",
                        "Int 16 Value",
                        "Int 32 Value",
                        "Int 64 Value",
                        "Single Value",
                        "Double Value",
                        "Decimal Value",
                        "Date Time Value",
                        "Colour Value",
                        "String Value",
                        "Year Month Value",
                        "Cycle Type Value"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 121
 testRunner.Then("we have (new) test default results:", ((string)(null)), table3, "Then ");
#line 127
 testRunner.Then("we have no errors!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="06 - Try to use default values (multiple values per type)")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "06 - Try to use default values (multiple values per type)")]
        public virtual void _06_TryToUseDefaultValuesMultipleValuesPerType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06 - Try to use default values (multiple values per type)", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 136
 testRunner.When("we do nothing!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Values",
                        "Char Values",
                        "Byte Values",
                        "Int 16 Values",
                        "Int 32 Values",
                        "Int 64 Values",
                        "Single Values",
                        "Double Values",
                        "Decimal Values",
                        "Date Time Values",
                        "Colour Values",
                        "String Values",
                        "Year Month Values",
                        "Cycle Type Values"});
            table4.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 141
 testRunner.Then("we have (old) test using (new) default results:", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Values",
                        "Char Values",
                        "Byte Values",
                        "Int 16 Values",
                        "Int 32 Values",
                        "Int 64 Values",
                        "Single Values",
                        "Double Values",
                        "Decimal Values",
                        "Date Time Values",
                        "Colour Values",
                        "String Values",
                        "Year Month Values",
                        "Cycle Type Values"});
            table5.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 145
 testRunner.Then("we have (new) test default results:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="07 - Try to pass all types with mixed values (single value per type)")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "07 - Try to pass all types with mixed values (single value per type)")]
        public virtual void _07_TryToPassAllTypesWithMixedValuesSingleValuePerType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07 - Try to pass all types with mixed values (single value per type)", ((string[])(null)));
#line 152
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Value",
                        "Char Value",
                        "Byte Value",
                        "Int 16 Value",
                        "Int 32 Value",
                        "UInt 32 Value",
                        "Int 64 Value",
                        "UInt 64 Value",
                        "Single Value",
                        "Double Value",
                        "Decimal Value",
                        "Date Time Value",
                        "Colour Value",
                        "String Value",
                        "Cycle Type Value",
                        "Year Month Value"});
            table6.AddRow(new string[] {
                        "yes",
                        "y",
                        "123",
                        "1234",
                        "1234",
                        "1234",
                        "2345",
                        "2345",
                        "1123.45",
                        "2345.67",
                        "32345.67",
                        "2015-04-15",
                        "Red",
                        "one",
                        "Timely",
                        "2015-10"});
            table6.AddRow(new string[] {
                        "true",
                        "t",
                        "123",
                        "1,234",
                        "1,234",
                        "1,234",
                        "2,345",
                        "2,345",
                        "1,123.45",
                        "2,345.67",
                        "32,345.67",
                        "2015-04-15 13:22",
                        "Red",
                        "two",
                        "Evening",
                        "9999-12"});
            table6.AddRow(new string[] {
                        "a1",
                        "b2",
                        "c3",
                        "d4",
                        "e5",
                        "f6",
                        "g7",
                        "h8",
                        "i9",
                        "j10",
                        "k11",
                        "l12",
                        "None",
                        "n14",
                        "o15",
                        "p16"});
#line 157
 testRunner.When("we test (old) the step row class:", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Value",
                        "Char Value",
                        "Byte Value",
                        "Int 16 Value",
                        "Int 32 Value",
                        "UInt 32 Value",
                        "Int 64 Value",
                        "UInt 64 Value",
                        "Single Value",
                        "Double Value",
                        "Decimal Value",
                        "Date Time Value",
                        "Colour Value",
                        "String Value",
                        "Cycle Type Value",
                        "Year Month Value"});
            table7.AddRow(new string[] {
                        "yes",
                        "y",
                        "123",
                        "1234",
                        "1234",
                        "1234",
                        "2345",
                        "2345",
                        "1123.45",
                        "2345.67",
                        "32345.67",
                        "2015-04-15",
                        "Red",
                        "one",
                        "Timely",
                        "2015-10"});
            table7.AddRow(new string[] {
                        "true",
                        "t",
                        "123",
                        "1,234",
                        "1,234",
                        "1234",
                        "2,345",
                        "2345",
                        "1,123.45",
                        "2,345.67",
                        "32,345.67",
                        "2015-04-15 13:22",
                        "Red Colour",
                        "two",
                        "Evening",
                        "9999-12"});
#line 163
 testRunner.When("we test (new) the step row class:", ((string)(null)), table7, "When ");
#line 171
 testRunner.Then("we have no errors!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="08 - Try to pass all types with mixed values (multiple values per type)")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "08 - Try to pass all types with mixed values (multiple values per type)")]
        public virtual void _08_TryToPassAllTypesWithMixedValuesMultipleValuesPerType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08 - Try to pass all types with mixed values (multiple values per type)", ((string[])(null)));
#line 176
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Colour Values",
                        "String Values",
                        "Cycle Type Values",
                        "Year Month Values",
                        "UInt 16 Values"});
            table8.AddRow(new string[] {
                        "Red, Green, Blue Colour",
                        "First, Second, Third",
                        "Timely, Evening",
                        "2015-10, 2015-09",
                        "1, 2, 3, 4"});
            table8.AddRow(new string[] {
                        "A, B, C, D",
                        "E, F, G",
                        "H, I, J",
                        "K, L",
                        "M"});
#line 181
 testRunner.When("we test (old) the step row class:", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Colour Values",
                        "String Values",
                        "Cycle Type Values",
                        "Year Month Values",
                        "UInt 16 Values"});
            table9.AddRow(new string[] {
                        "Red, Green, Blue Colour",
                        "First, Second, Third",
                        "Timely, Evening",
                        "2015-10, 2015-09",
                        "1, 2, 3, 4"});
#line 187
 testRunner.When("we test (new) the step row class:", ((string)(null)), table9, "When ");
#line 194
 testRunner.Then("we have no errors!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="09 - Try to pass all types with mixed values (single value per type)")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "09 - Try to pass all types with mixed values (single value per type)")]
        public virtual void _09_TryToPassAllTypesWithMixedValuesSingleValuePerType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09 - Try to pass all types with mixed values (single value per type)", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 203
 testRunner.When("we do nothing!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Value",
                        "Char Value",
                        "Byte Value",
                        "Int 16 Value",
                        "Int 32 Value",
                        "Int 64 Value",
                        "Single Value",
                        "Double Value",
                        "Decimal Value",
                        "Date Time Value",
                        "Colour Value",
                        "String Value",
                        "Year Month Value",
                        "Cycle Type Value"});
            table10.AddRow(new string[] {
                        "yes",
                        "y",
                        "123",
                        "1234",
                        "12345",
                        "123456",
                        "1123.45",
                        "2345.67",
                        "32345.67",
                        "2016-12-27",
                        "Red",
                        "Test 1",
                        "2016-11",
                        "Timely"});
            table10.AddRow(new string[] {
                        "true",
                        "t",
                        "123",
                        "1,234",
                        "12,345",
                        "123,456",
                        "1,123.45",
                        "2,345.67",
                        "32,345.67",
                        "2016-12-27 13:30",
                        "Red Colour",
                        "Test 2",
                        "2016-12",
                        "Evening"});
#line 208
 testRunner.Then("we have (old) test results:", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Value",
                        "Char Value",
                        "Byte Value",
                        "Int 16 Value",
                        "Int 32 Value",
                        "Int 64 Value",
                        "Single Value",
                        "Double Value",
                        "Decimal Value",
                        "Date Time Value",
                        "Colour Value",
                        "String Value",
                        "Year Month Value",
                        "Cycle Type Value"});
            table11.AddRow(new string[] {
                        "yes",
                        "y",
                        "123",
                        "1234",
                        "12345",
                        "123456",
                        "1123.45",
                        "2345.67",
                        "32345.67",
                        "2016-12-27",
                        "Red",
                        "Test 1",
                        "2016-11",
                        "Timely"});
            table11.AddRow(new string[] {
                        "true",
                        "t",
                        "123",
                        "1,234",
                        "12,345",
                        "123,456",
                        "1,123.45",
                        "2,345.67",
                        "32,345.67",
                        "2016-12-27 13:30",
                        "Red",
                        "Test 2",
                        "2016-12",
                        "Evening"});
#line 214
 testRunner.Then("we have (old) test using (new) results:", ((string)(null)), table11, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Value",
                        "Char Value",
                        "Byte Value",
                        "Int 16 Value",
                        "Int 32 Value",
                        "Int 64 Value",
                        "Single Value",
                        "Double Value",
                        "Decimal Value",
                        "Date Time Value",
                        "Colour Value",
                        "String Value",
                        "Year Month Value",
                        "Cycle Type Value"});
            table12.AddRow(new string[] {
                        "yes",
                        "y",
                        "123",
                        "1234",
                        "12345",
                        "123456",
                        "1123.45",
                        "2345.67",
                        "32345.67",
                        "2016-12-27",
                        "Red",
                        "Test 1",
                        "2016-11",
                        "Timely"});
            table12.AddRow(new string[] {
                        "true",
                        "t",
                        "123",
                        "1,234",
                        "12,345",
                        "123,456",
                        "1,123.45",
                        "2,345.67",
                        "32,345.67",
                        "2016-12-27 13:30",
                        "Red Colour",
                        "Test 2",
                        "2016-12",
                        "Evening"});
#line 221
 testRunner.Then("we have (new) test results:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="10 - Try to pass all types with mixed values (multiple values per type)")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "10 - Try to pass all types with mixed values (multiple values per type)")]
        public virtual void _10_TryToPassAllTypesWithMixedValuesMultipleValuesPerType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10 - Try to pass all types with mixed values (multiple values per type)", ((string[])(null)));
#line 230
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 234
 testRunner.When("we do nothing!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Values",
                        "Char Values",
                        "Byte Values",
                        "Int 16 Values",
                        "Int 32 Values",
                        "Int 64 Values",
                        "Single Values",
                        "Double Values",
                        "Decimal Values",
                        "Date Time Values",
                        "Colour Values",
                        "String Values",
                        "Year Month Values",
                        "Cycle Type Values"});
            table13.AddRow(new string[] {
                        "yes, yes, no",
                        "a, b, c",
                        "121, 122",
                        "1231, 1232",
                        "12341, 12342",
                        "123451, 123452",
                        "1123.41, 1123.42",
                        "2345.61, 2345.62",
                        "32345.61, 32345.62",
                        "2016-12-27, 2016-12-28",
                        "Red, Green, Blue",
                        "Test 1, Test 2",
                        "2016-11, 2016-10",
                        "Timely, Evening"});
            table13.AddRow(new string[] {
                        "true, true, false",
                        "a, b, c",
                        "121, 122",
                        "1,231, 1,232",
                        "12,341, 12,342",
                        "123,451, 123,452",
                        "1,123.41, 1,123.42",
                        "2,345.61, 2,345.62",
                        "32,345.61, 32,345.62",
                        "2016-12-27 13:30, 2016-12-28 14:30",
                        "Red Colour, Green Colour, Blue Colour",
                        "Test 1, Test 2",
                        "2016-11, 2016-10",
                        "Timely, Evening"});
#line 238
 testRunner.Then("we have (old) test results:", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Values",
                        "Char Values",
                        "Byte Values",
                        "Int 16 Values",
                        "Int 32 Values",
                        "Int 64 Values",
                        "Single Values",
                        "Double Values",
                        "Decimal Values",
                        "Date Time Values",
                        "Colour Values",
                        "String Values",
                        "Year Month Values",
                        "Cycle Type Values"});
            table14.AddRow(new string[] {
                        "yes, yes, no",
                        "a, b, c",
                        "121, 122",
                        "1231, 1232",
                        "12341, 12342",
                        "123451, 123452",
                        "1123.41, 1123.42",
                        "2345.61, 2345.62",
                        "32345.61, 32345.62",
                        "2016-12-27, 2016-12-28",
                        "Red, Green, Blue",
                        "Test 1, Test 2",
                        "2016-11, 2016-10",
                        "Timely, Evening"});
            table14.AddRow(new string[] {
                        "true, true, false",
                        "a, b, c",
                        "121, 122",
                        "1,231, 1,232",
                        "12,341, 12,342",
                        "123,451, 123,452",
                        "1,123.41, 1,123.42",
                        "2,345.61, 2,345.62",
                        "32,345.61, 32,345.62",
                        "2016-12-27 13:30, 2016-12-28 14:30",
                        "Red Colour, Green Colour, Blue Colour",
                        "Test 1, Test 2",
                        "2016-11, 2016-10",
                        "Timely, Evening"});
#line 244
 testRunner.Then("we have (old) test using (new) results:", ((string)(null)), table14, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is Boolean Values",
                        "Char Values",
                        "Byte Values",
                        "Int 16 Values",
                        "Int 32 Values",
                        "Int 64 Values",
                        "Single Values",
                        "Double Values",
                        "Decimal Values",
                        "Date Time Values",
                        "Colour Values",
                        "String Values",
                        "Year Month Values",
                        "Cycle Type Values"});
            table15.AddRow(new string[] {
                        "yes, yes, no",
                        "a, b, c",
                        "121, 122",
                        "1231, 1232",
                        "12341, 12342",
                        "123451, 123452",
                        "1123.41, 1123.42",
                        "2345.61, 2345.62",
                        "32345.61, 32345.62",
                        "2016-12-27, 2016-12-28",
                        "Red, Green, Blue",
                        "Test 1, Test 2",
                        "2016-11, 2016-10",
                        "Timely, Evening"});
            table15.AddRow(new string[] {
                        "true, true, false",
                        "a, b, c",
                        "121, 122",
                        "1,231, 1,232",
                        "12,341, 12,342",
                        "123,451, 123,452",
                        "1,123.41, 1,123.42",
                        "2,345.61, 2,345.62",
                        "32,345.61, 32,345.62",
                        "2016-12-27 13:30, 2016-12-28 14:30",
                        "Red Colour, Green Colour, Blue Colour",
                        "Test 1, Test 2",
                        "2016-11, 2016-10",
                        "Timely, Evening"});
#line 250
 testRunner.Then("we have (new) test results:", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="11 - Error handling on a large table is clearer in new code")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "11 - Error handling on a large table is clearer in new code")]
        public virtual void _11_ErrorHandlingOnALargeTableIsClearerInNewCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11 - Error handling on a large table is clearer in new code", ((string[])(null)));
#line 259
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line 263
 testRunner.When("we do nothing!", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Purchase Date",
                        "Quantity 1",
                        "Quantity 2",
                        "Quantity 3",
                        "Quantity 4",
                        "Quantity 5",
                        "Quantity 6"});
            table16.AddRow(new string[] {
                        "2017-01-01",
                        "1,000",
                        "2,000",
                        "3,000",
                        "4,000",
                        "5,000",
                        "6,000"});
            table16.AddRow(new string[] {
                        "2017-01-02",
                        "1,001",
                        "2,001",
                        "3,001",
                        "4,001",
                        "5,001",
                        "6,001"});
            table16.AddRow(new string[] {
                        "2017-01-03",
                        "1,002",
                        "2,002",
                        "3,002",
                        "4,002",
                        "5,002",
                        "6,002"});
            table16.AddRow(new string[] {
                        "2017-01-04",
                        "1,003",
                        "2,003",
                        "3,003",
                        "4,003",
                        "5,003",
                        "6,003"});
            table16.AddRow(new string[] {
                        "2017-01-05",
                        "1,004",
                        "2,004",
                        "3,004",
                        "4,004",
                        "5,004",
                        "6,004"});
            table16.AddRow(new string[] {
                        "2017-01-06",
                        "1,005",
                        "2,005",
                        "3,005",
                        "4,005",
                        "5,005",
                        "6,005"});
            table16.AddRow(new string[] {
                        "2017-01-07",
                        "1,006",
                        "2,006",
                        "3,006",
                        "4,006",
                        "5,006",
                        "6,006"});
            table16.AddRow(new string[] {
                        "2017-01-08",
                        "1,007",
                        "2,007",
                        "3,007",
                        "4,007",
                        "5,007",
                        "6,007"});
            table16.AddRow(new string[] {
                        "2017-01-09",
                        "1,008",
                        "2,008",
                        "3,008",
                        "4,008",
                        "5,008",
                        "6,008"});
            table16.AddRow(new string[] {
                        "2017-01-10",
                        "1,009",
                        "2,009",
                        "3,009",
                        "4,009",
                        "5,009",
                        "6,009"});
            table16.AddRow(new string[] {
                        "2017-01-11",
                        "1,010",
                        "2,010",
                        "3,010",
                        "4,010",
                        "5,010",
                        "6,010"});
            table16.AddRow(new string[] {
                        "2017-01-12",
                        "1,011",
                        "2,011",
                        "3,011",
                        "4,011",
                        "5,011",
                        "6,011"});
            table16.AddRow(new string[] {
                        "2017-01-13",
                        "1,012",
                        "2,012",
                        "3,012",
                        "4,012",
                        "5,012",
                        "6,012"});
            table16.AddRow(new string[] {
                        "2017-01-14",
                        "1,013",
                        "2,013",
                        "3,013",
                        "4,013",
                        "5,013",
                        "6,013"});
            table16.AddRow(new string[] {
                        "2017-01-15",
                        "1,014",
                        "2,014",
                        "3,014",
                        "4,014",
                        "5,014",
                        "6,014"});
            table16.AddRow(new string[] {
                        "2017-01-16",
                        "1,015",
                        "2,015",
                        "3,015",
                        "4,015",
                        "5,015",
                        "6,015"});
            table16.AddRow(new string[] {
                        "2017-01-17",
                        "1,016",
                        "2,016",
                        "3,016",
                        "4,016",
                        "5,016",
                        "6,016"});
            table16.AddRow(new string[] {
                        "2017-01-18",
                        "1,017",
                        "2,017",
                        "3,017",
                        "4,017",
                        "5,017",
                        "6,017"});
            table16.AddRow(new string[] {
                        "2017-01-19",
                        "1,018",
                        "2,018",
                        "3,018",
                        "4,018",
                        "5,018",
                        "6,018"});
            table16.AddRow(new string[] {
                        "2017-01-20",
                        "1,019",
                        "2,019",
                        "3,019",
                        "4,019",
                        "5,019",
                        "6,019"});
            table16.AddRow(new string[] {
                        "2017-01-21",
                        "1,020",
                        "2,020",
                        "3,020",
                        "4,020",
                        "5,020",
                        "6,020"});
            table16.AddRow(new string[] {
                        "2017-01-22",
                        "1,021",
                        "2,021",
                        "3,021",
                        "4,021",
                        "5,021",
                        "6,021"});
            table16.AddRow(new string[] {
                        "2017-01-23",
                        "1,022",
                        "2,022",
                        "3,022",
                        "4,022",
                        "5,022",
                        "6,022"});
            table16.AddRow(new string[] {
                        "2017-01-24",
                        "1,023",
                        "2,023",
                        "3,023",
                        "4,023",
                        "5,023",
                        "6,023"});
            table16.AddRow(new string[] {
                        "2017-01-25",
                        "1,024",
                        "2,024",
                        "3,024",
                        "4,024",
                        "5,024",
                        "6,024"});
            table16.AddRow(new string[] {
                        "2017-01-26",
                        "1,025",
                        "2,025",
                        "3,025",
                        "4,025",
                        "5,025",
                        "6,025"});
            table16.AddRow(new string[] {
                        "2017-01-27",
                        "1,026",
                        "2,026",
                        "3,026",
                        "4,026",
                        "5,026",
                        "6,026"});
            table16.AddRow(new string[] {
                        "2017-01-28",
                        "1,027",
                        "2,027",
                        "3,027",
                        "4,027",
                        "5,027",
                        "6,027"});
            table16.AddRow(new string[] {
                        "2017-01-29",
                        "1,028",
                        "2,028",
                        "3,028",
                        "4,028",
                        "5,028",
                        "6,028"});
            table16.AddRow(new string[] {
                        "2017-01-30",
                        "1,029",
                        "2,029",
                        "3,029",
                        "4,029",
                        "5,029",
                        "6,029"});
            table16.AddRow(new string[] {
                        "2017-01-31",
                        "1,030",
                        "2,030",
                        "3,030",
                        "4,030",
                        "5,030",
                        "6,030"});
            table16.AddRow(new string[] {
                        "2017-02-01",
                        "1,031",
                        "2,031",
                        "3,031",
                        "4,031",
                        "5,031",
                        "6,031"});
            table16.AddRow(new string[] {
                        "2017-02-02",
                        "1,032",
                        "2,032",
                        "3,032",
                        "4,032",
                        "5,032",
                        "6,032"});
            table16.AddRow(new string[] {
                        "2017-02-03",
                        "1,033",
                        "2,033",
                        "3,033",
                        "4,033",
                        "5,033",
                        "6,033"});
            table16.AddRow(new string[] {
                        "2017-02-04",
                        "1,034",
                        "2,034",
                        "3,034",
                        "4,034",
                        "5,034",
                        "6,034"});
            table16.AddRow(new string[] {
                        "2017-02-05",
                        "1,035",
                        "2,035",
                        "3,035",
                        "4,035",
                        "5,035",
                        "6,035"});
            table16.AddRow(new string[] {
                        "2017-02-06",
                        "1,036",
                        "2,036",
                        "3,036",
                        "4,036",
                        "5,036",
                        "6,036"});
            table16.AddRow(new string[] {
                        "2017-02-07",
                        "1,037",
                        "2,037",
                        "3,037",
                        "4,037",
                        "5,037",
                        "6,037"});
            table16.AddRow(new string[] {
                        "2017-02-08",
                        "1,038",
                        "2,038",
                        "3,038",
                        "4,038",
                        "5,038",
                        "6,038"});
            table16.AddRow(new string[] {
                        "2017-02-09",
                        "1,039",
                        "2,039",
                        "3,039",
                        "4,039",
                        "5,039",
                        "6,039"});
            table16.AddRow(new string[] {
                        "2017-02-10",
                        "1,040",
                        "2,040",
                        "3,040",
                        "4,040",
                        "5,040",
                        "6,040"});
            table16.AddRow(new string[] {
                        "2017-02-11",
                        "1,041",
                        "2,041",
                        "3,041",
                        "4,041",
                        "5,041",
                        "6,041"});
            table16.AddRow(new string[] {
                        "2017-02-12",
                        "1,042",
                        "2,042",
                        "3,042",
                        "4,042",
                        "5,042",
                        "6,042"});
            table16.AddRow(new string[] {
                        "2017-02-13",
                        "1,043",
                        "2,043",
                        "3,043",
                        "4,043",
                        "5,043",
                        "6,043"});
            table16.AddRow(new string[] {
                        "2017-02-14",
                        "1,044",
                        "2,044",
                        "3,044",
                        "4,044",
                        "5,044",
                        "6,044"});
            table16.AddRow(new string[] {
                        "2017-02-15",
                        "1,045",
                        "2,045",
                        "3,045",
                        "4,045",
                        "5,045",
                        "6,045"});
            table16.AddRow(new string[] {
                        "2017-02-16",
                        "1,046",
                        "2,046",
                        "3,046",
                        "4,046",
                        "5,046",
                        "6,046"});
            table16.AddRow(new string[] {
                        "2017-02-17",
                        "1,047",
                        "2,047",
                        "3,047",
                        "4,047",
                        "5,047",
                        "6,047"});
            table16.AddRow(new string[] {
                        "2017-02-18",
                        "1,048",
                        "2,048",
                        "3,048",
                        "4,048",
                        "5,048",
                        "6,048"});
            table16.AddRow(new string[] {
                        "2017-02-19",
                        "1,049",
                        "2,049",
                        "3,049",
                        "4,049",
                        "5,049",
                        "6,049"});
            table16.AddRow(new string[] {
                        "2017-02-20",
                        "1,050",
                        "2,050",
                        "3,050",
                        "4,050",
                        "5,050",
                        "6,050"});
            table16.AddRow(new string[] {
                        "2017-02-21",
                        "1,051",
                        "2,051",
                        "3,051",
                        "4,051",
                        "5,051",
                        "6,051"});
            table16.AddRow(new string[] {
                        "2017-02-22",
                        "1,052",
                        "2,052",
                        "3,052",
                        "4,052",
                        "5,052",
                        "6,052"});
            table16.AddRow(new string[] {
                        "2017-02-23",
                        "1,053",
                        "2,053",
                        "3,053",
                        "4,053",
                        "5,053",
                        "6,053"});
            table16.AddRow(new string[] {
                        "2017-02-24",
                        "1,054",
                        "2,054",
                        "3,054",
                        "4,054",
                        "5,054",
                        "6,054"});
            table16.AddRow(new string[] {
                        "2017-02-25",
                        "1,055",
                        "2,055",
                        "3,055",
                        "4,055",
                        "5,055",
                        "6,055"});
            table16.AddRow(new string[] {
                        "2017-02-26",
                        "1,056",
                        "2,056",
                        "3,056",
                        "4,056",
                        "5,056",
                        "6,056"});
            table16.AddRow(new string[] {
                        "2017-02-27",
                        "1,057",
                        "2,057",
                        "3,057",
                        "4,057",
                        "5,057",
                        "6,057"});
            table16.AddRow(new string[] {
                        "2017-02-28",
                        "1,058",
                        "2,058",
                        "3,058",
                        "4,058",
                        "5,058",
                        "6,058"});
            table16.AddRow(new string[] {
                        "2017-03-01",
                        "1,059",
                        "2,059",
                        "3,059",
                        "4,059",
                        "5,059",
                        "6,059"});
#line 280
 testRunner.Then("we have (old) large test results:", ((string)(null)), table16, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Purchase Date",
                        "Quantity 1",
                        "Quantity 2",
                        "Quantity 3",
                        "Quantity 4",
                        "Quantity 5",
                        "Quantity 6"});
            table17.AddRow(new string[] {
                        "2017-01-01",
                        "1,000",
                        "2,000",
                        "3,000",
                        "4,000",
                        "5,000",
                        "6,000"});
            table17.AddRow(new string[] {
                        "2017-01-02",
                        "1,001",
                        "2,001",
                        "3,001",
                        "4,001",
                        "5,001",
                        "6,001"});
            table17.AddRow(new string[] {
                        "2017-01-03",
                        "1,002",
                        "2,002",
                        "3,002",
                        "4,002",
                        "5,002",
                        "6,002"});
            table17.AddRow(new string[] {
                        "2017-01-04",
                        "1,003",
                        "2,003",
                        "3,003",
                        "4,003",
                        "5,003",
                        "6,003"});
            table17.AddRow(new string[] {
                        "2017-01-05",
                        "1,004",
                        "2,004",
                        "3,004",
                        "4,004",
                        "5,004",
                        "6,004"});
            table17.AddRow(new string[] {
                        "2017-01-06",
                        "1,005",
                        "2,005",
                        "3,005",
                        "4,005",
                        "5,005",
                        "6,005"});
            table17.AddRow(new string[] {
                        "2017-01-07",
                        "1,006",
                        "2,006",
                        "3,006",
                        "4,006",
                        "5,006",
                        "6,006"});
            table17.AddRow(new string[] {
                        "2017-01-08",
                        "1,007",
                        "2,007",
                        "3,007",
                        "4,007",
                        "5,007",
                        "6,007"});
            table17.AddRow(new string[] {
                        "2017-01-09",
                        "1,008",
                        "2,008",
                        "3,008",
                        "4,008",
                        "5,008",
                        "6,008"});
            table17.AddRow(new string[] {
                        "2017-01-10",
                        "1,009",
                        "2,009",
                        "3,009",
                        "4,009",
                        "5,009",
                        "6,009"});
            table17.AddRow(new string[] {
                        "2017-01-11",
                        "1,010",
                        "2,010",
                        "3,010",
                        "4,010",
                        "5,010",
                        "6,010"});
            table17.AddRow(new string[] {
                        "2017-01-12",
                        "1,011",
                        "2,011",
                        "3,011",
                        "4,011",
                        "5,011",
                        "6,011"});
            table17.AddRow(new string[] {
                        "2017-01-13",
                        "1,012",
                        "2,012",
                        "3,012",
                        "4,012",
                        "5,012",
                        "6,012"});
            table17.AddRow(new string[] {
                        "2017-01-14",
                        "1,013",
                        "2,013",
                        "3,013",
                        "4,013",
                        "5,013",
                        "6,013"});
            table17.AddRow(new string[] {
                        "2017-01-15",
                        "1,014",
                        "2,014",
                        "3,014",
                        "4,014",
                        "5,014",
                        "6,014"});
            table17.AddRow(new string[] {
                        "2017-01-16",
                        "1,015",
                        "2,015",
                        "3,015",
                        "4,015",
                        "5,015",
                        "6,015"});
            table17.AddRow(new string[] {
                        "2017-01-17",
                        "1,016",
                        "2,016",
                        "3,016",
                        "4,016",
                        "5,016",
                        "6,016"});
            table17.AddRow(new string[] {
                        "2017-01-18",
                        "1,017",
                        "2,017",
                        "3,017",
                        "4,017",
                        "5,017",
                        "6,017"});
            table17.AddRow(new string[] {
                        "2017-01-19",
                        "1,018",
                        "2,018",
                        "3,018",
                        "4,018",
                        "5,018",
                        "6,018"});
            table17.AddRow(new string[] {
                        "2017-01-20",
                        "1,019",
                        "2,019",
                        "3,019",
                        "4,019",
                        "5,019",
                        "6,019"});
            table17.AddRow(new string[] {
                        "2017-01-21",
                        "1,020",
                        "2,020",
                        "3,020",
                        "4,020",
                        "5,020",
                        "6,020"});
            table17.AddRow(new string[] {
                        "2017-01-22",
                        "1,021",
                        "2,021",
                        "3,021",
                        "4,021",
                        "5,021",
                        "6,021"});
            table17.AddRow(new string[] {
                        "2017-01-23",
                        "1,022",
                        "2,022",
                        "3,022",
                        "4,022",
                        "5,022",
                        "6,022"});
            table17.AddRow(new string[] {
                        "2017-01-24",
                        "1,023",
                        "2,023",
                        "3,023",
                        "4,023",
                        "5,023",
                        "6,023"});
            table17.AddRow(new string[] {
                        "2017-01-25",
                        "1,024",
                        "2,024",
                        "3,024",
                        "4,024",
                        "5,024",
                        "6,024"});
            table17.AddRow(new string[] {
                        "2017-01-26",
                        "1,025",
                        "2,025",
                        "3,025",
                        "4,025",
                        "5,025",
                        "6,025"});
            table17.AddRow(new string[] {
                        "2017-01-27",
                        "1,026",
                        "2,026",
                        "3,026",
                        "4,026",
                        "5,026",
                        "6,026"});
            table17.AddRow(new string[] {
                        "2017-01-28",
                        "1,027",
                        "2,027",
                        "3,027",
                        "4,027",
                        "5,027",
                        "6,027"});
            table17.AddRow(new string[] {
                        "2017-01-29",
                        "1,028",
                        "2,028",
                        "3,028",
                        "4,028",
                        "5,028",
                        "6,028"});
            table17.AddRow(new string[] {
                        "2017-01-30",
                        "1,029",
                        "2,029",
                        "3,029",
                        "4,029",
                        "5,029",
                        "6,029"});
            table17.AddRow(new string[] {
                        "2017-01-31",
                        "1,030",
                        "2,030",
                        "3,030",
                        "4,030",
                        "5,030",
                        "6,030"});
            table17.AddRow(new string[] {
                        "2017-02-01",
                        "1,031",
                        "2,031",
                        "3,031",
                        "4,031",
                        "5,031",
                        "6,031"});
            table17.AddRow(new string[] {
                        "2017-02-02",
                        "1,032",
                        "2,032",
                        "3,032",
                        "4,032",
                        "5,032",
                        "6,032"});
            table17.AddRow(new string[] {
                        "2017-02-03",
                        "1,033",
                        "2,033",
                        "3,033",
                        "4,033",
                        "5,033",
                        "6,033"});
            table17.AddRow(new string[] {
                        "2017-02-04",
                        "1,034",
                        "2,034",
                        "3,034",
                        "4,034",
                        "5,034",
                        "6,034"});
            table17.AddRow(new string[] {
                        "2017-02-05",
                        "1,035",
                        "2,035",
                        "3,035",
                        "4,035",
                        "5,035",
                        "6,035"});
            table17.AddRow(new string[] {
                        "2017-02-06",
                        "1,036",
                        "2,036",
                        "3,036",
                        "4,036",
                        "5,036",
                        "6,036"});
            table17.AddRow(new string[] {
                        "2017-02-07",
                        "1,037",
                        "2,037",
                        "3,037",
                        "4,037",
                        "5,037",
                        "6,037"});
            table17.AddRow(new string[] {
                        "2017-02-08",
                        "1,038",
                        "2,038",
                        "3,038",
                        "4,038",
                        "5,038",
                        "6,038"});
            table17.AddRow(new string[] {
                        "2017-02-09",
                        "1,039",
                        "2,039",
                        "3,039",
                        "4,039",
                        "5,039",
                        "6,039"});
            table17.AddRow(new string[] {
                        "2017-02-10",
                        "1,040",
                        "2,040",
                        "3,040",
                        "4,040",
                        "5,040",
                        "6,040"});
            table17.AddRow(new string[] {
                        "2017-02-11",
                        "1,041",
                        "2,041",
                        "3,041",
                        "4,041",
                        "5,041",
                        "6,041"});
            table17.AddRow(new string[] {
                        "2017-02-12",
                        "1,042",
                        "2,042",
                        "3,042",
                        "4,042",
                        "5,042",
                        "6,042"});
            table17.AddRow(new string[] {
                        "2017-02-13",
                        "1,043",
                        "2,043",
                        "3,043",
                        "4,043",
                        "5,043",
                        "6,043"});
            table17.AddRow(new string[] {
                        "2017-02-14",
                        "1,044",
                        "2,044",
                        "3,044",
                        "4,044",
                        "5,044",
                        "6,044"});
            table17.AddRow(new string[] {
                        "2017-02-15",
                        "1,045",
                        "2,045",
                        "3,045",
                        "4,045",
                        "5,045",
                        "6,045"});
            table17.AddRow(new string[] {
                        "2017-02-16",
                        "1,046",
                        "2,046",
                        "3,046",
                        "4,046",
                        "5,046",
                        "6,046"});
            table17.AddRow(new string[] {
                        "2017-02-17",
                        "1,047",
                        "2,047",
                        "3,047",
                        "4,047",
                        "5,047",
                        "6,047"});
            table17.AddRow(new string[] {
                        "2017-02-18",
                        "1,048",
                        "2,048",
                        "3,048",
                        "4,048",
                        "5,048",
                        "6,048"});
            table17.AddRow(new string[] {
                        "2017-02-19",
                        "1,049",
                        "2,049",
                        "3,049",
                        "4,049",
                        "5,049",
                        "6,049"});
            table17.AddRow(new string[] {
                        "2017-02-20",
                        "1,050",
                        "2,050",
                        "3,050",
                        "4,050",
                        "5,050",
                        "6,050"});
            table17.AddRow(new string[] {
                        "2017-02-21",
                        "1,051",
                        "2,051",
                        "3,051",
                        "4,051",
                        "5,051",
                        "6,051"});
            table17.AddRow(new string[] {
                        "2017-02-22",
                        "1,052",
                        "2,052",
                        "3,052",
                        "4,052",
                        "5,052",
                        "6,052"});
            table17.AddRow(new string[] {
                        "2017-02-23",
                        "1,053",
                        "2,053",
                        "3,053",
                        "4,053",
                        "5,053",
                        "6,053"});
            table17.AddRow(new string[] {
                        "2017-02-24",
                        "1,054",
                        "2,054",
                        "3,054",
                        "4,054",
                        "5,054",
                        "6,054"});
            table17.AddRow(new string[] {
                        "2017-02-25",
                        "1,055",
                        "2,055",
                        "3,055",
                        "4,055",
                        "5,055",
                        "6,055"});
            table17.AddRow(new string[] {
                        "2017-02-26",
                        "1,056",
                        "2,056",
                        "3,056",
                        "4,056",
                        "5,056",
                        "6,056"});
            table17.AddRow(new string[] {
                        "2017-02-27",
                        "1,057",
                        "2,057",
                        "3,057",
                        "4,057",
                        "5,057",
                        "6,057"});
            table17.AddRow(new string[] {
                        "2017-02-28",
                        "1,058",
                        "2,058",
                        "3,058",
                        "4,058",
                        "5,058",
                        "6,058"});
            table17.AddRow(new string[] {
                        "2017-03-01",
                        "1,059",
                        "2,059",
                        "3,059",
                        "4,059",
                        "5,059",
                        "6,059"});
#line 345
 testRunner.Then("we have (new) large test results:", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="12 - Test passing of data for same scenario into different step classes")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the step flow code")]
        [Xunit.TraitAttribute("Description", "12 - Test passing of data for same scenario into different step classes")]
        public virtual void _12_TestPassingOfDataForSameScenarioIntoDifferentStepClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12 - Test passing of data for same scenario into different step classes", ((string[])(null)));
#line 413
this.ScenarioSetup(scenarioInfo);
#line 17
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Quantity",
                        "Percentage",
                        "Count"});
            table18.AddRow(new string[] {
                        "c1",
                        "1.2345",
                        "34.56",
                        "1,000"});
            table18.AddRow(new string[] {
                        "c2",
                        "2.3456",
                        "56.78",
                        "2,000"});
            table18.AddRow(new string[] {
                        "c3",
                        "3.4567",
                        "78.90",
                        "3,000"});
#line 417
 testRunner.Given("we have these values:", ((string)(null)), table18, "Given ");
#line 426
 testRunner.When("we use the calculator log function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Quantity",
                        "Percentage",
                        "Count"});
            table19.AddRow(new string[] {
                        "c1",
                        "0.0915",
                        "3.54",
                        "6"});
            table19.AddRow(new string[] {
                        "c2",
                        "0.3703",
                        "4.04",
                        "7"});
            table19.AddRow(new string[] {
                        "c3",
                        "0.5387",
                        "4.37",
                        "8"});
#line 430
 testRunner.Then("we have these values:", ((string)(null)), table19, "Then ");
#line 438
 testRunner.When("we use the calculator log10 function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Quantity",
                        "Percentage",
                        "Count"});
            table20.AddRow(new string[] {
                        "c1",
                        "0.0915",
                        "3.54",
                        "3"});
            table20.AddRow(new string[] {
                        "c2",
                        "0.3703",
                        "4.04",
                        "3"});
            table20.AddRow(new string[] {
                        "c3",
                        "0.5387",
                        "4.37",
                        "3"});
#line 442
 testRunner.Then("we have these values:", ((string)(null)), table20, "Then ");
#line 450
 testRunner.When("we use the calculator sin function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Quantity",
                        "Percentage",
                        "Count"});
            table21.AddRow(new string[] {
                        "c1",
                        "0.9440",
                        "0",
                        "0"});
            table21.AddRow(new string[] {
                        "c2",
                        "0.7146",
                        "0.23",
                        "0"});
            table21.AddRow(new string[] {
                        "c3",
                        "-0.3099",
                        "-0.35",
                        "0"});
#line 454
 testRunner.Then("we have these values:", ((string)(null)), table21, "Then ");
#line 463
 testRunner.When("we use the calculator none function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Quantity",
                        "Percentage",
                        "Count"});
            table22.AddRow(new string[] {
                        "c1",
                        "1.2345",
                        "34.56",
                        "1,000"});
            table22.AddRow(new string[] {
                        "c2",
                        "2.3456",
                        "56.78",
                        "2,000"});
            table22.AddRow(new string[] {
                        "c3",
                        "3.4567",
                        "78.90",
                        "3,000"});
#line 467
 testRunner.Then("we have these values:", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TestTheStepFlowCodeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TestTheStepFlowCodeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
